# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Application {
  createdAt: DateTime
  createdBy: User!
  id: ID!
  project: Project!
  projectId: Float!
  reviewerIds: [Float!]
  reviewers: [User!]
  scheduledAt: DateTime
  title: String!
  updatedAt: DateTime
}

input ApplicationsFilter {
  _and: ApplicationsFilter
  _nor: ApplicationsFilter
  _or: ApplicationsFilter
  createdAt: FilterOperator
  id: FilterOperator
  project: ProjectsFilter
  projectId: FilterOperator
  reviewerIds: FilterOperator
  reviewers: UsersFilter
  scheduledAt: FilterOperator
  title: FilterOperator
  updatedAt: FilterOperator
}

type ApplicationsResponse {
  items: [Application!]!
  resultCount: Int!
  totalCount: Int!
}

enum AuthSource {
  Facebook
  Google
  Local
}

input BabiesFilter {
  _and: BabiesFilter
  _nor: BabiesFilter
  _or: BabiesFilter
  createdAt: FilterOperator
  id: FilterOperator
  name: FilterOperator
  updatedAt: FilterOperator
}

type BabiesResponse {
  items: [Baby!]!
  resultCount: Int!
  totalCount: Int!
}

type Baby {
  createdAt: DateTime
  id: ID!
  name: String!
  updatedAt: DateTime
}

input CreateApplicationDto {
  projectId: Float
  reviewers: [UserIdDto!]
  scheduledAt: DateTime
  title: String!
}

input CreateBabyDto {
  name: String!
}

input CreatePlanDto {
  features: [PersistFeatureDto!]
  name: String!
  projectId: Float
}

input CreateProjectDto {
  description: String
  documents: [FileDto!]
  name: String!
  ownerId: Float
  planId: Float!
}

input CreateUserDto {
  authType: AuthSource
  avatar: FileDto
  consent: Boolean
  email: String!
  enabled: Boolean
  firstName: String!
  lastName: String!
  password: String!
  role: Role
  verified: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Feature {
  createdAt: DateTime
  id: ID!
  name: String!
  plan: Plan
  updatedAt: DateTime
}

input FeaturesFilter {
  _and: FeaturesFilter
  _nor: FeaturesFilter
  _or: FeaturesFilter
  createdAt: FilterOperator
  id: FilterOperator
  name: FilterOperator
  plan: PlansFilter
  updatedAt: FilterOperator
}

type File {
  data: String!
  description: String
  meta: FileMeta
  originalName: String
  title: String
}

input FileDto {
  data: String!
  description: String
  originalName: String
  title: String
}

input FileFilter {
  data: FilterOperator
  description: FilterOperator
  originalName: FilterOperator
  title: FilterOperator
}

type FileMeta {
  createdAt: DateTime
  mimeType: String
  size: Float
}

type FileMetaSchema {
  createdAt: DateTime
  mimeType: String
  size: Float
}

type FileSchema {
  data: String!
  description: String
  meta: FileMetaSchema
  originalName: String
  title: String
}

input FilterOperator {
  _all: [String!]
  _elemMatch: FilterOperator
  _eq: String
  _exists: Boolean
  _gt: String
  _gte: String
  _in: [String!]
  _lt: String
  _lte: String
  _ne: String
  _nin: [String!]
  _not: FilterOperator
  _regex: String
  _size: Int
  _where: String
}

type HealthDto {
  details: HealthStatusDto!
  error: HealthStatusDto!
  info: HealthStatusDto!
  status: String!
}

type HealthStatusDto {
  database: StatusDto!
  memory: StatusDto!
  storage: StatusDto!
}

type JwtToken {
  access_token: String!
  expires_in: Float!
  refresh_token: String!
}

type Mutation {
  createApplication(data: CreateApplicationDto!): Application!
  createBaby(data: CreateBabyDto!): Baby!
  createPlan(data: CreatePlanDto!): Plan!
  createProject(data: CreateProjectDto!): Project!
  createUser(data: CreateUserDto!): User!
  deleteApplication(id: ID!): Application!
  deleteBaby(id: ID!): Baby!
  deletePlan(id: ID!): Plan!
  deleteProject(id: ID!): Project!
  deleteProjectFiles(documents: [String!], id: ID): StatusResponse!
  deleteUser(id: ID!): User!
  deleteUserFiles(avatar: String, id: ID): StatusResponse!
  login(password: String!, username: String!): JwtToken!
  logout: StatusResponse!
  refresh: JwtToken!
  registration(data: RegisterUserDto!): User!
  updateApplication(data: UpdateApplicationDto!, id: ID!): Application!
  updateBaby(data: UpdateBabyDto!, id: ID!): Baby!
  updatePlan(data: UpdatePlanDto!, id: ID!): Plan!
  updateProject(data: UpdateProjectDto!, id: ID!): Project!
  updateUser(data: UpdateUserDto!, id: ID!): User!
}

input PersistFeatureDto {
  id: Float
  name: String
}

type Plan {
  createdAt: DateTime
  features: [Feature!]
  id: ID!
  name: String!
  project: Project
  updatedAt: DateTime
}

input PlansFilter {
  _and: PlansFilter
  _nor: PlansFilter
  _or: PlansFilter
  createdAt: FilterOperator
  features: FeaturesFilter
  id: FilterOperator
  name: FilterOperator
  project: ProjectsFilter
  updatedAt: FilterOperator
}

type PlansResponse {
  items: [Plan!]!
  resultCount: Int!
  totalCount: Int!
}

type Project {
  applications: [Application!]
  createdAt: DateTime
  createdBy: User!
  description: String
  documents: [FileSchema!]
  id: ID!
  name: String!
  owner: User!
  ownerId: Float!
  plan: Plan!
  planId: Float!
  updatedAt: DateTime
}

input ProjectsFilter {
  _and: ProjectsFilter
  _nor: ProjectsFilter
  _or: ProjectsFilter
  applications: ApplicationsFilter
  createdAt: FilterOperator
  description: FilterOperator
  documents: FileFilter
  id: FilterOperator
  name: FilterOperator
  owner: UsersFilter
  ownerId: FilterOperator
  plan: PlansFilter
  planId: FilterOperator
  updatedAt: FilterOperator
}

type ProjectsResponse {
  items: [Project!]!
  resultCount: Int!
  totalCount: Int!
}

type Query {
  application(id: ID!): Application!
  applications(filter: ApplicationsFilter, page: Int, size: Int, sort: String): ApplicationsResponse!
  authUser: User!
  babies(filter: BabiesFilter, page: Int, size: Int, sort: String): BabiesResponse!
  baby(id: ID!): Baby!
  health: HealthDto!
  identifierAvailable(field: String!, value: String!): StatusResponse!
  plan(id: ID!): Plan!
  plans(filter: PlansFilter, page: Int, size: Int, sort: String): PlansResponse!
  project(id: ID!): Project!
  projects(filter: ProjectsFilter, page: Int, size: Int, sort: String): ProjectsResponse!
  user(id: ID!): User!
  users(filter: UsersFilter, page: Int, size: Int, sort: String): UsersResponse!
}

input RegisterUserDto {
  avatar: FileDto
  consent: Boolean!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

enum Role {
  Admin
  User
}

type StatusDto {
  status: String!
}

type StatusResponse {
  message: String
  success: Boolean!
}

input UpdateApplicationDto {
  projectId: Float
  reviewers: [UserIdDto!]
  scheduledAt: DateTime
  title: String
}

input UpdateBabyDto {
  name: String
}

input UpdatePlanDto {
  features: [PersistFeatureDto!]
  name: String
  projectId: Float
}

input UpdateProjectDto {
  description: String
  documents: [FileDto!]
  name: String
  ownerId: Float
  planId: Float
}

input UpdateUserDto {
  authType: AuthSource
  avatar: FileDto
  email: String
  enabled: Boolean
  firstName: String
  lastName: String
  password: String
  role: Role
  verified: Boolean
}

type User {
  avatar: File
  consent: Boolean!
  createdAt: DateTime
  createdBy: User!
  email: String!
  enabled: Boolean!
  firstName: String!
  id: ID!
  lastName: String!
  loginAt: DateTime
  logoutAt: DateTime
  projectIds: [Float!]
  projects: [Project!]
  reviewedAppIds: [Float!]
  reviewedApps: [Application!]
  role: Role!
  updatedAt: DateTime
  verified: Boolean!
}

input UserIdDto {
  id: Float
}

input UsersFilter {
  _and: UsersFilter
  _nor: UsersFilter
  _or: UsersFilter
  avatar: FileFilter
  consent: FilterOperator
  createdAt: FilterOperator
  email: FilterOperator
  enabled: FilterOperator
  firstName: FilterOperator
  id: FilterOperator
  lastName: FilterOperator
  loginAt: FilterOperator
  logoutAt: FilterOperator
  projectIds: FilterOperator
  projects: ProjectsFilter
  reviewedAppIds: FilterOperator
  reviewedApps: ApplicationsFilter
  role: FilterOperator
  updatedAt: FilterOperator
  verified: FilterOperator
}

type UsersResponse {
  items: [User!]!
  resultCount: Int!
  totalCount: Int!
}
